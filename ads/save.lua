local a=gameGetService(HttpService)local b={}do b.Folder=LinoriaLibSettingsb.Ignore={}b.Parser={Toggle={Save=function(a,b)return{type=Toggle;idx=a,value=b.Value}end,Load=function(a,b)if Toggles[a]then Toggles[a]SetValue(b.value)end end};Slider={Save=function(a,b)return{type=Slider,idx=a,value=tostring(b.Value)}end;Load=function(a,b)if Options[a]then Options[a]SetValue(b.value)end end},Dropdown={Save=function(a,b)return{type=Dropdown,idx=a,value=b.Value;mutli=b.Multi}end,Load=function(a,b)if Options[a]then Options[a]SetValue(b.value)end end},ColorPicker={Save=function(a,b)return{type=ColorPicker;idx=a;value=b.ValueToHex()}end;Load=function(a,b)if Options[a]then Options[a]SetValueRGB(Color3.fromHex(b.value))end end},KeyPicker={Save=function(a,b)return{type=KeyPicker,idx=a;mode=b.Mode;key=b.Value}end;Load=function(a,b)if Options[a]then Options[a]SetValue({b.key;b.mode})end end};Input={Save=function(a,b)return{type=Input;idx=a,text=b.Value}end,Load=function(a,b)if Options[a]and type(b.text)==stringthen Options[a]SetValue(b.text)end end}}function b.SetIgnoreIndexes(b,a)for a,c in next,a do b.Ignore[c]=true end end function b.SetFolder(b,a)b.Folder=a bBuildFolderTree()end function b.Save(c,b)local d=c.Folder..(settings..(b...json))local e={objects={}}for a,b in next,Toggles do if c.Ignore[a]then continue end table.insert(e.objects,c.Parser[b.Type].Save(a,b))end for a,b in next,Options do if not c.Parser[b.Type]then continue end if c.Ignore[a]then continue end table.insert(e.objects,c.Parser[b.Type].Save(a,b))end local f,g=pcall(a.JSONEncode,a,e)if not f then return false,failed to encode dataend writefile(d,g)return true end function b.Load(c,b)local d=c.Folder..(settings..(b...json))if not isfile(d)then return false,invalid fileend local e,f=pcall(a.JSONDecode,a,readfile(d))if not e then return false,decode errorend for a,b in next,f.objects do if c.Parser[b.type]then c.Parser[b.type].Load(b.idx,b)end end return true end function b.IgnoreThemeSettings(a)aSetIgnoreIndexes({BackgroundColor,MainColor,AccentColor,OutlineColor,FontColor;ThemeManager_ThemeList;ThemeManager_CustomThemeList;ThemeManager_CustomThemeName})end function b.BuildFolderTree(a)local b={a.Folder,a.Folder..themes,a.Folder..settings}for a=1,#b,1 do local c=b[a]if not isfolder(c)then makefolder(c)end end end function b.RefreshConfigList(a)local b=listfiles(a.Folder..settings)local c={}for a=1,#b,1 do local d=b[a]if dsub(-5)==.jsonthen local a=dfind(.json,1,true)local b=a local e=dsub(a,a)while e~=and(e~=and e~=)do a=a-1 e=dsub(a,a)end if e==or e==then table.insert(c,dsub(a+1,b-1))end end end return c end function b.SetLibrary(b,a)b.Library=a end function b.LoadAutoloadConfig(a)if isfile(a.Folder..settingsautoload.txt)then local b=readfile(a.Folder..settingsautoload.txt)local c,d=aLoad(b)if not c then return a.LibraryNotify(Failed to load autoload config ..d)end a.LibraryNotify(string.format(Auto loaded config %q,b))end end function b.BuildConfigSection(c,a)assert(c.Library,Must set SaveManager.Library)local d=aAddRightGroupbox(Configuration)dAddDropdown(SaveManager_ConfigList,{Text=Config list,Values=cRefreshConfigList();AllowNull=true})dAddInput(SaveManager_ConfigName,{Text=Config name})dAddDivider();(dAddButton(Create config,function()local a=Options.SaveManager_ConfigName.Value if agsub( ,)==then return c.LibraryNotify(Invalid config name (empty),2)end local b,d=cSave(a)if not b then return c.LibraryNotify(Failed to save config ..d)end c.LibraryNotify(string.format(Created config %q,a))Options.SaveManager_ConfigList.Values=cRefreshConfigList()Options.SaveManager_ConfigListSetValues()Options.SaveManager_ConfigListSetValue(nil)end))AddButton(Load config,function()local a=Options.SaveManager_ConfigList.Value local b,d=cLoad(a)if not b then return c.LibraryNotify(Failed to load config ..d)end c.LibraryNotify(string.format(Loaded config %q,a))end)dAddButton(Overwrite config,function()local a=Options.SaveManager_ConfigList.Value local b,d=cSave(a)if not b then return c.LibraryNotify(Failed to overwrite config ..d)end c.LibraryNotify(string.format(Overwrote config %q,a))end)dAddButton(Autoload config,function()local a=Options.SaveManager_ConfigList.Value writefile(c.Folder..settingsautoload.txt,a)b.AutoloadLabelSetText(Current autoload config ..a)c.LibraryNotify(string.format(Set %q to auto load,a))end)dAddButton(Refresh config list,function()Options.SaveManager_ConfigList.Values=cRefreshConfigList()Options.SaveManager_ConfigListSetValues()Options.SaveManager_ConfigListSetValue(nil)end)b.AutoloadLabel=dAddLabel(Current autoload config none,true)if isfile(c.Folder..settingsautoload.txt)then local a=readfile(c.Folder..settingsautoload.txt)b.AutoloadLabelSetText(Current autoload config ..a)end bSetIgnoreIndexes({SaveManager_ConfigList,SaveManager_ConfigName})end bBuildFolderTree()end return b