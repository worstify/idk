local a=game:GetService("HttpService")local b={}do b.Folder="LinoriaLibSettings"b.Ignore={}b.Parser={Toggle={Save=function(a,b)return{type="Toggle";idx=a,value=b.Value}end,Load=function(a,b)if Toggles[a]then Toggles[a]:SetValue(b.value)end end};Slider={Save=function(a,b)return{type="Slider",idx=a,value=tostring(b.Value)}end;Load=function(a,b)if Options[a]then Options[a]:SetValue(b.value)end end},Dropdown={Save=function(a,b)return{type="Dropdown",idx=a,value=b.Value;mutli=b.Multi}end,Load=function(a,b)if Options[a]then Options[a]:SetValue(b.value)end end},ColorPicker={Save=function(a,b)return{type="ColorPicker";idx=a;value=b.Value:ToHex()}end;Load=function(a,b)if Options[a]then Options[a]:SetValueRGB(Color3.fromHex(b.value))end end},KeyPicker={Save=function(a,b)return{type="KeyPicker",idx=a;mode=b.Mode;key=b.Value}end;Load=function(a,b)if Options[a]then Options[a]:SetValue({b.key;b.mode})end end};Input={Save=function(a,b)return{type="Input";idx=a,text=b.Value}end,Load=function(a,b)if Options[a]and type(b.text)=="string"then Options[a]:SetValue(b.text)end end}}function b.SetIgnoreIndexes(b,a)for a,c in next,a do b.Ignore[c]=true end end function b.SetFolder(b,a)b.Folder=a b:BuildFolderTree()end function b.Save(c,b)local d=c.Folder..("/settings/"..(b..".json"))local e={objects={}}for a,b in next,Toggles do if c.Ignore[a]then continue end table.insert(e.objects,c.Parser[b.Type].Save(a,b))end for a,b in next,Options do if not c.Parser[b.Type]then continue end if c.Ignore[a]then continue end table.insert(e.objects,c.Parser[b.Type].Save(a,b))end local f,g=pcall(a.JSONEncode,a,e)if not f then return false,"failed to encode data"end writefile(d,g)return true end function b.Load(c,b)local d=c.Folder..("/settings/"..(b..".json"))if not isfile(d)then return false,"invalid file"end local e,f=pcall(a.JSONDecode,a,readfile(d))if not e then return false,"decode error"end for a,b in next,f.objects do if c.Parser[b.type]then c.Parser[b.type].Load(b.idx,b)end end return true end function b.IgnoreThemeSettings(a)a:SetIgnoreIndexes({"BackgroundColor","MainColor","AccentColor","OutlineColor","FontColor";"ThemeManager_ThemeList";"ThemeManager_CustomThemeList";"ThemeManager_CustomThemeName"})end function b.BuildFolderTree(a)local b={a.Folder,a.Folder.."/themes",a.Folder.."/settings"}for a=1,#b,1 do local c=b[a]if not isfolder(c)then makefolder(c)end end end function b.RefreshConfigList(a)local b=listfiles(a.Folder.."/settings")local c={}for a=1,#b,1 do local d=b[a]if d:sub(-5)==".json"then local a=d:find(".json",1,true)local b=a local e=d:sub(a,a)while e~="/"and(e~="\\"and e~="")do a=a-1 e=d:sub(a,a)end if e=="/"or e=="\\"then table.insert(c,d:sub(a+1,b-1))end end end return c end function b.SetLibrary(b,a)b.Library=a end function b.LoadAutoloadConfig(a)if isfile(a.Folder.."/settings/autoload.txt")then local b=readfile(a.Folder.."/settings/autoload.txt")local c,d=a:Load(b)if not c then return a.Library:Notify("Failed to load autoload config: "..d)end a.Library:Notify(string.format("Auto loaded config %q",b))end end function b.BuildConfigSection(c,a)assert(c.Library,"Must set SaveManager.Library")local d=a:AddRightGroupbox("Configuration")d:AddDropdown("SaveManager_ConfigList",{Text="Config list",Values=c:RefreshConfigList();AllowNull=true})d:AddInput("SaveManager_ConfigName",{Text="Config name"})d:AddDivider();(d:AddButton("Create config",function()local a=Options.SaveManager_ConfigName.Value if a:gsub(" ","")==""then return c.Library:Notify("Invalid config name (empty)",2)end local b,d=c:Save(a)if not b then return c.Library:Notify("Failed to save config: "..d)end c.Library:Notify(string.format("Created config %q",a))Options.SaveManager_ConfigList.Values=c:RefreshConfigList()Options.SaveManager_ConfigList:SetValues()Options.SaveManager_ConfigList:SetValue(nil)end)):AddButton("Load config",function()local a=Options.SaveManager_ConfigList.Value local b,d=c:Load(a)if not b then return c.Library:Notify("Failed to load config: "..d)end c.Library:Notify(string.format("Loaded config %q",a))end)d:AddButton("Overwrite config",function()local a=Options.SaveManager_ConfigList.Value local b,d=c:Save(a)if not b then return c.Library:Notify("Failed to overwrite config: "..d)end c.Library:Notify(string.format("Overwrote config %q",a))end)d:AddButton("Autoload config",function()local a=Options.SaveManager_ConfigList.Value writefile(c.Folder.."/settings/autoload.txt",a)b.AutoloadLabel:SetText("Current autoload config: "..a)c.Library:Notify(string.format("Set %q to auto load",a))end)d:AddButton("Refresh config list",function()Options.SaveManager_ConfigList.Values=c:RefreshConfigList()Options.SaveManager_ConfigList:SetValues()Options.SaveManager_ConfigList:SetValue(nil)end)b.AutoloadLabel=d:AddLabel("Current autoload config: none",true)if isfile(c.Folder.."/settings/autoload.txt")then local a=readfile(c.Folder.."/settings/autoload.txt")b.AutoloadLabel:SetText("Current autoload config: "..a)end b:SetIgnoreIndexes({"SaveManager_ConfigList","SaveManager_ConfigName"})end b:BuildFolderTree()end return b